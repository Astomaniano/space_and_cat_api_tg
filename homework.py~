import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
import requests
import random
import datetime
from newsapi import NewsApiClient

from googletrans import Translator

from config import TOKEN, NEWSAPI_API_KEY

bot = Bot(token=TOKEN)
dp = Dispatcher()
translator = Translator()
newsapi = NewsApiClient(api_key=NEWSAPI_API_KEY)

def info_date():
    today = datetime.date.today()
    month = today.strftime("%m")
    day = today.strftime("%d")

    url = f'http://numbersapi.com/{month}/{day}/date'
    response = requests.get(url)

    if response.status_code == 200:
        return response.text
    else:
        return(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {response.status_code}")


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /todate –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ.')

@dp.message(Command('todate'))
async def todate(message: Message):
    info = info_date()
    info_splt = info.split()
    daymonth = ' '.join(info_splt[:2])
    translated_date = translator.translate(daymonth, src='en', dest='ru').text
    translated_info = translator.translate(info, src='en', dest='ru').text
    await message.answer(f'–ò—Ç–∞–∫ —Å–µ–≥–æ–¥–Ω—è {translated_date}.\n\n–ê –≤–æ—Ç –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –ø—Ä–æ —ç—Ç—É –¥–∞—Ç—É:\n\n{translated_info}')

@dp.message(Command('news'))
async def news(message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –†–æ—Å—Å–∏–∏
    news_response = newsapi.get_top_headlines(page_size=10)
    articles = news_response.get('articles', [])


    if not articles:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
    article = random.choice(articles)
    title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
    description = article.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
    url = article.get('url', '')

    news_message = (f"üóû {translator.translate(title, src='en', dest='ru').text}\n\n"
                    f"{translator.translate(description, src='en', dest='ru').text}\n\n"
                    f"–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: {url}")
    await message.answer(news_message)



async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
